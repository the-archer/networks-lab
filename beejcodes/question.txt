Problem 2 : HTTP Proxy
The Basics 
Your first task is to build a basic web proxy capable of accepting HTTP requests, forwarding requests to remote (origin) servers, and returning response data to a client. The proxy does NOT need to handle concurrent requests, i.e. no need for threaded, forked, or event-based non-blocking operation. Rather, the proxy should handle requests sequentially. You will only be responsible for implementing the GET method. All other request methods received by the proxy should elicit a "Not Implemented" (501) error (see RFC 1945 section 9.5 - Server Error). 
This assignment can be completed in either C or C++. It should compile and run (using g++) without errors or warnings from the FC 010 cluster, producing a binary called proxy that takes as its first argument a port to listen from. Don't use a hard-coded port number. 
You shouldn't assume that your server will be running on a particular IP address, or that clients will be coming from a pre-determined IP. 
Listening 
When your proxy starts, the first thing that it will need to do is establish a socket connection that it can use to listen for incoming connections. Your proxy should listen on the port specified from the command line and wait for incoming client connections. Once a client has connected, the proxy should read data from the client and then check for a properly-formatted HTTP request. Specifically, the proxy should ensure that the request contains a valid request line: 
<METHOD> <URL or PATH> <HTTP VERSION>
And a Host header, if the specified resource is a PATH: 
Host: <HOSTNAME>
All other headers just need to be properly formatted: 
<HEADER NAME>: <HEADER VALUE>
An invalid request from the client should be answered with an appropriate error code, i.e. "Bad Request" (400) or "Not Implemented" (501) for valid HTTP methods other than GET. See the note on network programming for more guidelines on how to handle real world clients and semi-valid requests. 
Parsing the URL 
Once the proxy sees a valid HTTP request, it will need to parse the requested URL. The proxy needs at most three pieces of information: the requested host and port, and the requested path. See the URL (7) manual page for more info. You will need to parse the URL (absolute or relative) specified in the request line. Note that since a relative URL request, i.e. (/) does not include a hostname it must include the Host header in addition to the standard request line. Otherwise the proxy will not know where to retrieve the original resource. If the hostname, indicated in either the absolute URL or in the Host header, does not have a port specified, use the default HTTP port 80. 
Getting Data from the Remote Server 
Once the proxy has parsed the URL, it can make a connection to the requested host (using the appropriate remote port, or the default of 80 if none is specified) and send the HTTP request for the appropriate resource. The proxy should always send the request in the relative URL + Host header format regardless of how the request was received from the client: 

Accept from client: 
GET http://www.iitg.ernet.in/ HTTP/1.0
or 
GET / HTTP/1.0
Host: www.iitg.ernet.in
Send to remote server: 
GET / HTTP/1.0
Host: www.iitg.ernet.in
(Additional client specified headers, if any...)
Returning Data to the Client 
After the response from the remote server is received, the proxy should send the response message (as-is) to the client via the appropriate socket. Once the transaction is complete, the proxy should close the connection to the client. Note: the proxy should terminate the connection to the remote server once the response has been fully received. For HTTP 1.0, the remote server will terminate the connection once the transaction is complete. 
Testing Your Proxy 
Run your client with the following command: 
./proxy <port>, where port is the port number that the proxy should listen on. As a basic test of functionality, try requesting a page using telnet: 
telnet localhost <port>
Trying 127.0.0.1...
Connected to localhost.localdomain (127.0.0.1).
Escape character is '^]'.
GET http://www.google.com/ HTTP/1.0
If your proxy is working correctly, the headers and HTML of the Google homepage should be displayed on your terminal screen. Notice here that we request the absolute URL (http://www.google.com/) instead of just the relative URL (/). Again, your proxy should support both of these formats from the client, and only send the relative URL format along with a Host header. A good sanity check of proxy behavior would be to compare the HTTP response (headers and body) obtained via your proxy with the response from a direct telnet connection to the remote server.